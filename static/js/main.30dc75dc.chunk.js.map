{"version":3,"sources":["components/TodoForm/TodoForm.jsx","components/ListItem/ListItem.jsx","components/Typography/Typography.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoForm","onSubmit","useState","value","setValue","className","e","preventDefault","type","placeholder","onChange","target","ListItem","items","onClick","deleteItem","item","map","key","id","text","values","Example","useDencrypt","result","dencrypt","React","i","action","setInterval","length","clearInterval","App","setItem","newItem","newItemList","push","deletedItem","index","findIndex","x","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA0BeA,G,MAxBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAW/B,OACI,0BACIC,UAAU,aACVJ,SAXQ,SAAAK,GACZA,EAAEC,iBACGJ,IACLF,EAASE,GACTC,EAAS,OAQL,2BAAOI,KAAK,OACRC,YAAY,iBACZN,MAAOA,EACPO,SAAU,SAACJ,GAAD,OAAOF,EAASE,EAAEK,OAAOR,UACvC,4BAAQK,KAAK,UAAb,QCKGI,EAxBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAEjBC,GAFyC,EAAfL,SAEb,SAAAM,GAEfF,EADoBE,KAKxB,OACI,6BAEQH,EAAMI,KAAI,SAAAD,GAAI,OACV,0BAAME,IAAKF,EAAKG,IACZ,2BAAOX,KAAK,OACRL,MAAOa,EAAKI,OAEhB,4BAAQZ,KAAK,SAASM,QAASC,GAA/B,W,OCdlBM,EAAS,CAAC,aAAc,aAoBfC,EAlBC,WAAO,IAAD,EACOC,cAApBC,EADa,EACbA,OAAQC,EADK,EACLA,SAcf,OAZAC,aAAgB,WACd,IAAIC,EAAI,EAEFC,EAASC,aAAY,WACzBJ,EAASJ,EAAOM,IAEhBA,EAAIA,IAAMN,EAAOS,OAAS,EAAI,EAAIH,EAAI,IACrC,KAEH,OAAO,kBAAMI,cAAcH,MAC1B,CAACH,IAEG,4BAAOD,ICeDQ,EA9BH,WAAO,IAAD,EACQ9B,mBAAS,IADjB,mBACTc,EADS,KACHiB,EADG,KAqBhB,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUJ,SAdQ,SAAAE,GACpB,IAAM+B,EAAU,CACdf,GAAIH,EAAKc,OAAS,EAClBV,KAAMjB,GAEFgC,EAAW,YAAOnB,GACxBmB,EAAYC,KAAKF,GACjBD,EAAQE,MAQN,kBAAC,EAAD,CAAUtB,MAAOG,EAAMF,QAtBF,SAAAuB,GACvB,IAAMC,EAAQtB,EAAKuB,WAAU,SAAAC,GAAC,OAAIA,EAAErB,KAAOkB,EAAYlB,MACjDgB,EAAW,YAAOnB,GACxBmB,EAAYM,OAAOH,EAAO,GAC1BL,EAAQE,QCDQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.30dc75dc.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst TodoForm = ({ onSubmit }) => {\n    const [value, setValue] = useState('');\n\n    const addItem = e => {\n        e.preventDefault();\n        if (!value) return;\n        onSubmit(value);\n        setValue('');\n    }\n\n\n    return (\n        <form\n            className='to-do-form'\n            onSubmit={addItem}>\n            <input type='text'\n                placeholder='Type text here'\n                value={value}\n                onChange={(e) => setValue(e.target.value)} />\n            <button type='submit'>+</button>\n        </form>\n    );\n}\n\nexport default TodoForm;","import React from 'react';\n\nconst ListItem = ({ items, onClick, onChange }) => {\n\n    const deleteItem = item => {\n        const deletedItem = item;\n        onClick(deletedItem)\n    }\n\n\n    return (\n        <div>\n            {\n                items.map(item => (\n                    <form key={item.id}>\n                        <input type='text'\n                            value={item.text}\n                        />\n                        <button type='submit' onClick={deleteItem} >x</button>\n                    </form>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default ListItem;\n\n\n","import * as React from 'react';\n\nimport {useDencrypt} from 'use-dencrypt-effect';\n\nconst values = ['Hello Tun!', 'Todo List'];\n\nconst Example = () => {\n  const {result, dencrypt} = useDencrypt();\n\n  React.useEffect(() => {\n    let i = 0;\n\n    const action = setInterval(() => {\n      dencrypt(values[i]);\n\n      i = i === values.length - 1 ? 0 : i + 1;\n    }, 2000);\n\n    return () => clearInterval(action);\n  }, [dencrypt]);\n\n  return <code>{result}</code>;\n};\n\nexport default Example;\n","import React, { useState } from 'react';\nimport './App.css';\nimport TodoForm from './components/TodoForm/TodoForm';\nimport ListItem from './components/ListItem/ListItem';\nimport Example from './components/Typography/Typography';\n\nconst App = () => {\n  const [item, setItem] = useState([]);\n\n  const handleDeleteItem = deletedItem => {\n    const index = item.findIndex(x => x.id === deletedItem.id)\n    const newItemList = [...item];\n    newItemList.splice(index, 1);\n    setItem(newItemList);\n  }\n\n  const handleAddItem = value => {\n    const newItem = {\n      id: item.length + 1,\n      text: value,\n    };\n    const newItemList = [...item];\n    newItemList.push(newItem);\n    setItem(newItemList);\n  };\n\n\n  return (\n    <div className='App'>\n      <Example />\n      <TodoForm onSubmit={handleAddItem} />\n      <ListItem items={item} onClick={handleDeleteItem} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}